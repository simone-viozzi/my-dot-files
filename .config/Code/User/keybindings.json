// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "ctrl+alt+left",
        "command": "-workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "ctrl+alt+left",
        "command": "workbench.action.navigateBack"
    },
    {
        "key": "ctrl+alt+-",
        "command": "-workbench.action.navigateBack"
    },
    {
        "key": "ctrl+alt+right",
        "command": "-workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+alt+right",
        "command": "workbench.action.navigateForward"
    },
    {
        "key": "ctrl+shift+-",
        "command": "-workbench.action.navigateForward"
    },
    {
        "key": "`",
        "command": "editor.action.insertSnippet",
        "args": {
            "snippet": "`"
        },
    },
    {
        "key": "shift+alt+enter",
        "command": "github.copilot.generate",
        "when": "editorTextFocus && github.copilot.activated"
    },
    {
        "key": "ctrl+shift+alt+c",
        "command": "-copyRelativeFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-copyFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.act  ion.terminal.openNativeConsole",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+right",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
    },
    {
        "key": "tab",
        "command": "-editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenNavigateNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "shift+enter",
        "command": "notebook.cell.execute",
        "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "meta+enter",
        "command": "-notebook.cell.execute",
        "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
    },
    {
        "key": "shift+enter",
        "command": "interactive.execute",
        "when": "resourceScheme == 'vscode-interactive'"
    },
    {
        "key": "meta+enter",
        "command": "-interactive.execute",
        "when": "resourceScheme == 'vscode-interactive'"
    },
    {
        "key": "shift+enter",
        "command": "notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && notebookCellType == 'markup'"
    },
    {
        "key": "meta+enter",
        "command": "-notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && notebookCellType == 'markup'"
    },
    {
        "key": "ctrl+alt+j",
        "command": "notebook.cell.joinBelow",
        "when": "notebookEditorFocused"
    },
    {
        "key": "alt+meta+j",
        "command": "-notebook.cell.joinBelow",
        "when": "notebookEditorFocused"
    },
    {
        "key": "ctrl+shift+alt+j",
        "command": "notebook.cell.joinAbove",
        "when": "notebookEditorFocused"
    },
    {
        "key": "shift+alt+meta+j",
        "command": "-notebook.cell.joinAbove",
        "when": "notebookEditorFocused"
    },
    {
        "key": "ctrl+alt+meta+n",
        "command": "-welcome.showNewFileEntries"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup",
        "when": "!activeEditorGroupEmpty"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.quickOpenNavigatePreviousInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
    {
        "key": "ctrl+tab",
        "command": "editor.action.inlineSuggest.acceptNextWord",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "ctrl+right",
        "command": "-editor.action.inlineSuggest.acceptNextWord",
        "when": "inlineSuggestionVisible && !editorReadonly"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.quickOpenNavigateNextInEditorPicker",
        "when": "inEditorsPicker && inQuickOpen"
    },
]